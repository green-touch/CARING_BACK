name: CI/CD to EC2 (multi-level deploy only main)

on:
  push:
    branches:
      - main
    paths:
      - 'CARING-Back-*/**'
      - 'docker-compose-*.yml'
      - '.github/workflows/deploy.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      JAR_DIRS: |
        CARING-Back-Gateway
        CARING-Back-Manager
        CARING-Back-User
        CARING-Back-Config
        CARING-Back-Discovery

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Determine Changed Scope
        id: detect
        run: |
          echo "📦 Detecting changed files..."
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || true)
          echo "$changed_files" > changed_files.txt
          cat changed_files.txt

          levels=()

          if echo "$changed_files" | grep -q "docker-compose-infra.yml"; then
            levels+=("infra")
          fi

          if echo "$changed_files" | grep -qE "CARING-Back-(Gateway|Manager|User)|docker-compose-outer-app.yml"; then
            levels+=("outer")
          fi

          if echo "$changed_files" | grep -qE "CARING-Back-(Config|Discovery)|docker-compose-inner-app.yml"; then
            levels+=("inner")
          fi

          DEPLOY_LEVELS=$(IFS=,; echo "${levels[*]}")
          echo "DEPLOY_LEVELS=$DEPLOY_LEVELS" >> $GITHUB_ENV
          echo "✔ Detected deploy levels: $DEPLOY_LEVELS"

      - name: Show changed files
        if: env.DEPLOY_LEVELS != ''
        run: cat changed_files.txt

      - name: Build Changed JARs (Skip Tests)
        if: env.DEPLOY_LEVELS != ''
        run: |
          mkdir -p packaged-jars
          for dir in $JAR_DIRS; do
            echo "🔎 Checking $dir ..."
            if grep -q "$dir" changed_files.txt; then
              echo "📦 Building $dir"
              cd $dir
              chmod +x gradlew
              ./gradlew bootJar -x test
              cp build/libs/*.jar ../packaged-jars/
              cd ..
            else
              echo "⏭ $dir not changed"
            fi
          done

      - name: Upload JARs to EC2
        if: env.DEPLOY_LEVELS != ''
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: "packaged-jars/*.jar"
          target: "~/CARING_BACK/jars"
          rm: false

      - name: SSH into EC2 and deploy Docker Compose
        if: env.DEPLOY_LEVELS != ''
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd ~/CARING_BACK

            if [ ! -f .env ]; then
              echo "❌ .env 파일이 존재하지 않아 배포 중단"
              exit 1
            fi

            IFS=',' read -ra levels <<< "$DEPLOY_LEVELS"
            for level in "${levels[@]}"; do
              echo "🔁 Deploying level: $level"
              docker-compose -f docker-compose-${level}-app.yml down
              sleep 2
              docker-compose -f docker-compose-${level}-app.yml up -d --build
              sleep 2
            done
