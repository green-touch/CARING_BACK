name: CI/CD to EC2 (multi-level deploy only main)

on:
  push:
    branches:
      - main
    paths:
      - 'CARING-Back-*/**'
      - 'docker-compose-*.yml'
      - '.github/workflows/deploy.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      JAR_DIRS: |
        CARING-Back-Gateway
        CARING-Back-Manager
        CARING-Back-User
        CARING-Back-Config
        CARING-Back-Discovery

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Determine Changed Scope
        id: detect
        run: |
          echo "üì¶ Detecting changed files..."
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || true)
          echo "$changed_files" > changed_files.txt
          cat changed_files.txt

          levels=()

          if echo "$changed_files" | grep -q "docker-compose-infra.yml"; then
            levels+=("infra" "outer" "inner")
          elif echo "$changed_files" | grep -qE "CARING-Back-(Config|Discovery)|docker-compose-outer-app.yml"; then
            levels+=("outer" "inner")
          elif echo "$changed_files" | grep -qE "CARING-Back-(Gateway|Manager|User)|docker-compose-inner-app.yml"; then
            levels+=("inner")
          fi

          DEPLOY_LEVELS=$(printf "%s\n" "${levels[@]}" | awk '!x[$0]++' | paste -sd "," -)
          echo "DEPLOY_LEVELS=$DEPLOY_LEVELS" >> $GITHUB_ENV
          echo "‚úî Detected deploy levels: $DEPLOY_LEVELS"

      - name: Show changed files
        if: env.DEPLOY_LEVELS != ''
        run: cat changed_files.txt

      - name: Build Changed JARs (Skip Tests)
        if: env.DEPLOY_LEVELS != ''
        run: |
          for dir in $JAR_DIRS; do
            echo "üîé Checking $dir ..."
            if grep -q "$dir" changed_files.txt; then
              echo "üì¶ Building $dir"
              cd $dir
              chmod +x gradlew
              ./gradlew bootJar -x test
              cd ..
            else
              echo "‚è≠ $dir not changed"
            fi
          done

      - name: Upload JARs to EC2 in correct service paths
        if: env.DEPLOY_LEVELS != ''
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: |
            CARING-Back-*/build/libs/*.jar
          target: "~/CARING_BACK"
          rm: false

      - name: SSH into EC2 and deploy Docker Compose
        if: env.DEPLOY_LEVELS != ''
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e
            cd ~/CARING_BACK

            export DEPLOY_LEVELS="${{ env.DEPLOY_LEVELS }}"
            echo "üìå DEPLOY_LEVELS=$DEPLOY_LEVELS"

            if [ ! -f .env ]; then
              echo "‚ùå .env ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏïÑ Î∞∞Ìè¨ Ï§ëÎã®"
              exit 1
            fi

            mapfile -t levels < <(echo "$DEPLOY_LEVELS" | tr ',' '\n')
            echo "üìå Parsed levels: ${levels[@]}"

            echo "üßπ Stopping containers"
            for level in inner outer infra; do
              for deploy_level in "${levels[@]}"; do
                if [ "$deploy_level" = "$level" ]; then
                  echo "‚õî Stopping $level"
                  if [ "$level" = "infra" ]; then
                    docker-compose -f docker-compose-infra.yml down --remove-orphans || true
                  else
                    docker-compose -f docker-compose-${level}-app.yml down --remove-orphans || true
                  fi
                  echo "‚è≥ Waiting after stopping $level..."
                  sleep 5
                fi
              done
            done

            echo "üöÄ Starting containers"
            for level in infra outer inner; do
              for deploy_level in "${levels[@]}"; do
                if [ "$deploy_level" = "$level" ]; then
                  echo "üîº Starting $level"
                  if [ "$level" = "infra" ]; then
                    docker-compose -f docker-compose-infra.yml up -d --build
                    sleep 30
                  elif [ "$level" = "outer" ]; then
                    docker-compose -f docker-compose-outer-app.yml up -d --build
                    sleep 20
                  else
                    docker-compose -f docker-compose-inner-app.yml up -d --build
                    sleep 15
                  fi
                fi
              done
            done
