version: '3.8'

services:
  config-server:
    container_name: config-service
    build:
      context: ./CARING-Back-Config
    ports:
      - "8888:8888"
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: msa_user
      SPRING_RABBITMQ_PASSWORD: test123
    depends_on:
      - rabbitmq
    networks:
      - caring-net

  discovery-server:
    container_name: discovery-service
    build:
      context: ./CARING-Back-Discovery
    ports:
      - "8761:8761"
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: msa_user
      SPRING_RABBITMQ_PASSWORD: test123
    depends_on:
      - config-server
      - rabbitmq
    networks:
      - caring-net

  gateway-server:
    container_name: gateway-service
    build:
      context: ./CARING-Back-Gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-service:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
    depends_on:
      - discovery-server
      - config-server
      - rabbitmq
    networks:
      - caring-net
    command: ["/bin/sh", "-c", "while ! nc -z discovery-service 8761; do sleep 1; done; java -jar app.jar"]

  user-server:
    container_name: user-service
    build:
      context: ./CARING-Back-User
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-service:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/caring_user?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: springproject
      SPRING_RABBITMQ_HOST: rabbitmq
    depends_on:
      - mysql
      - discovery-server
      - config-server
      - rabbitmq
    networks:
      - caring-net

  manager-server:
    container_name: manager-service
    build:
      context: ./CARING-Back-Manager
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_IMPORT: optional:configserver:http://config-service:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/caring_user?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: springproject
      SPRING_RABBITMQ_HOST: rabbitmq
    depends_on:
      - mysql
      - discovery-server
      - config-server
      - rabbitmq
    networks:
      - caring-net

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: springproject
      MYSQL_DATABASE: caring_user
    ports:
      - "3307:3306"
    volumes:
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - caring-net

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: msa_user
      RABBITMQ_DEFAULT_PASS: test123
    networks:
      - caring-net

  kafka:
    image: apache/kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://broker:9092,PLAINTEXT://broker:19092
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      CLUSTER_ID: 4L6g3nShT-eMCtK--X86sw
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - caring-net

volumes:
  mysql_data:

networks:
  caring-net:
